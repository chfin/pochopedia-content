;;;; shlyfile.lisp
;; usage: shly command [options ...]
;; requires shelly (http://shlyfile.org/)
;; commands:
;;   generate-snippets

(ql:quickload "alexandria")
(ql:quickload "cl-yaclyaml")

(defpackage #:pochopedia.extras
  (:use #:cl)
  (:nicknames #:ppe)
  (:export #:generate-snippets))

(in-package #:pochopedia.extras)

(defparameter *excluded-schemas* '("person" "plain" "default" "index"))

(defparameter *yaml-cache* nil)

(defun load-yaml (filename)
  (alexandria:if-let ((found (assoc filename *yaml-cache*)))
    (cdr found)
    (handler-bind ((style-warning (lambda (c) (declare (ignore c)) (muffle-warning))))
      (let ((yaml (cl-yaclyaml:yaml-simple-load (alexandria:read-file-into-string filename))))
        (push (cons filename yaml) *yaml-cache*)
        yaml))))

(defun load-schema-keys (filename)
  (let (keys
        (yaml (load-yaml filename)))
    (maphash (lambda (key desc)
               (unless (and desc (gethash "reverse" desc))
                 (push key keys)))
             (gethash "keys" yaml))
    (setf keys (nreverse keys))
    (dolist (include (alexandria:ensure-list (gethash "include" yaml)))
      (setf keys (append (load-schema-keys (merge-pathnames include "../schema/*.yaml")) keys)))
    (remove-duplicates keys :test #'string=)))

(defun write-snippet (name keys stream)
  (write-line "# contributor: generated by pochopedia-extras" stream)
  (format stream "# name: ~a (pochopedia data file)~%" name)
  (format stream "# key: ~a~%" name)
  (write-line "# expand-env: ((yas-indent-line 'fixed))" stream)
  (write-line "# --" stream)
  (write-line "# $1" stream)
  (format stream "schema: ~a~%" name)
  (loop for i from 2 for key in keys
     do (format stream "~a: ${~a:~a}~%" key i key)))

(defun generate-snippets ()
  (ensure-directories-exist "./yas-snippets/")
  (let ((schema-paths (directory "../schema/**/*.yaml")))
    (dolist (schema-path schema-paths)
      (unless (member (pathname-name schema-path) *excluded-schemas* :test #'string=)
        (let ((keys (load-schema-keys schema-path))
              (name (pathname-name schema-path)))
          (alexandria:with-output-to-file
              (stream (merge-pathnames name "./yas-snippets/")
                      :if-exists :supersede)
            (write-snippet name keys stream))))))
  "Done.")
